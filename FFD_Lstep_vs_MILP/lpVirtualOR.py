from pulp import *
import numpy as np
import matplotlib.pyplot as plt
import sys
from utils import Timer
from scipy.sparse import coo_matrix

def LBP_samples(samples,rooms, days, T, A=0, B=0, TDepartment=0, weights=[1, 1, 1, 100], alpha=0, debug=False):
	"""
	LBP Wrapper that computes sample mean and std and then calls LBP
	"""
	means = np.mean(samples,axis = 0)
	std = np.std(samples,axis = 0)
	return LBP(np.ceil(means + std*alpha), rooms,days, T, weights,debug)

def LBP(durations, rooms, days, T, A=0, B=0, TDepartment=0, weights=[1, 1, 1, 100] , debug=False):
    """
    Linear Integer/Binary Program Solver
    Given the duration of cases (that may not be for one day only), the # of rooms,
    and the # of days, determine a schedule for surgeries.
    Time is discrete and if a surgery is run after time T, then it incurs an overtime penalty.
    A surgery may last after time T, but cannot start after time T.

    Only considering the overtime and idling time
    weights = [idle,overtime]
	"""
    durations = np.array(durations, 'int')
    A = np.array(A)
    assert len(weights) == 4, "need three weights for overtime, block overtime and idle time"
    assert durations.ndim == 1,"durations should be a 1D vector of durations"
    assert rooms > 0,"number of rooms needs to be positive"
    assert days > 0,"number of days needs to be positive"
    assert T > 0, "number of timesteps neeeds to be positive"

    with Timer() as tim:
        cases = len(durations)
        surgeons = A.shape[1]
        maxT = T + 5
        print "maxT =", maxT
        prob = LpProblem("LBP",LpMinimize)

        # ## Variable Creation ###
        with Timer() as tim_create:
            x = np.empty((cases,days,maxT), 'object')  # start times, indexed by [case #, room, day, time]
            y = np.empty((cases,days,maxT), 'object')  # indicator that case i in room j on day d at time t
            s = np.empty(cases, 'object') #  starttime
            # r = np.empty((rooms, surgeons, days), 'object')  # block overflow time in OR j by surgeon k on day d
            for i in range(cases):
                for d in range(days):
                    for t in range(maxT):
                        x[i, d ,t] = LpVariable("x {0} {1} {2}".format(i, d, t), cat='Binary')
                        y[i, d, t] = LpVariable("y {0} {1} {2}".format(i, d, t), cat='Binary')
                s[i] = LpVariable("s {0}".format(i), lowBound=0, upBound=T, cat='Integer')
                # for j, k, d in itertools.product(range(rooms), range(surgeons), range(days)):
                #     r[j, k, d] = LpVariable("r {0} {1} {2}".format(j, k, d), cat='Integer')
        if debug:
            print "=> total elapsed time for creation of variables = %s s" % tim_create.elapsed

        # ##Objective Formulation###
        with Timer() as tim_obj:
            obj = []
            obj.append(weights[1] * lpSum(lpSum(y[:,:,T:])))  # overtime cost
            obj.append(weights[3]*(cases - lpSum(x[:,:,:])))
            # for i in range(cases):
            #     obj.append(-weights[0] * lpSum(y[i,:,:T]))  # idle time cost
            prob += lpSum(obj) # + days*rooms*T*weights[0]
        if (debug):
            print "==> total elapsed time for obj formulation = %s s" % tim_obj.elapsed

        ### Constraint Formulation###
        with Timer() as tim_con:
            with Timer() as tim_con1:
                for i in range(cases):
                    for d in range(days):
                        for t in range(maxT):
                            prob += y[i,d,t] == lpSum(x[i,d,max(0,t+1-durations[i]):t+1]) # stating y as a function of x
            if (debug):
                print "==> elapsed time for y definition formulation = %s s" % tim_con1.elapsed
            with Timer() as tim_con2:
                for i in range(cases):
                    tmp = []
                    for d in range(days):
                        tmp.append(np.dot(np.array(range(maxT)),x[i,d,:]))
                    prob += s[i] == lpSum(tmp) # stating s as a function of x
                    prob += s[i] <= -durations[i] + maxT  # No surgery goes after maxT
                    prob += lpSum(x[i,:,:]) <= 1  # each case can't be assigned more than once
            if (debug):
                print "==> elapsed time for last surgery end and case once constraint formulation = %s s" % tim_con2.elapsed

            with Timer() as tim_con3:
                for i,d,t in itertools.product(range(cases), range(days), range(T, maxT)):
                    prob += x[i, d, t] == 0 # No case begins after T
            if (debug):
                print "==> elapsed time for last cast start time formulation = %s s" % tim_con3.elapsed

            with Timer() as tim_con4:
                for d in range(days):
                    for t in range(maxT):
                        prob += lpSum(y[:,d,t]) <= rooms  # virtual room can only be occupied by rooms number of cases at a time
            if (debug):
                print "==> elapsed time for single room occupancy constraint formulation = %s s" % tim_con4.elapsed

            with Timer() as tim_con5:
                for k in range(surgeons):
                    for d in range(days):
                        for t in range(maxT):
                            prob += LpAffineExpression([(y[i,d,t],A[i,k]) for i in range(cases)]) <= 1 # each surgeon
                                                    # cannot be assigned to more than one case at any time - method 2
                            # prob += lpSum([y[i,d,t]*A[i,k] for i in range(cases)]) <= 1 # each surgeon cannot be
                                                            # assigned to more than one case at any time - method 1
            if (debug):
                print "==> elapsed time for surgeon constraint formulation = %s s" % tim_con5.elapsed

        if(debug):
            print "=> total elapsed time for constraint creation = %s s" % tim_con.elapsed

        # prob.writeLP("linear program log")

    ###Solving###

        with Timer() as tim1:
            print "Generating schedule...\n"
            prob.solve()
        if(debug):
            print "=> elapsed time for solving lp = %s s" % tim1.elapsed
    if(debug):
        print "=> total elapsed time for scheduling = %s s" % tim.elapsed

    ###Extracting Data###
    with Timer() as tim:
        schedule =  np.zeros(cases, dtype = 'object')

        #Use if you need to have the x and y values for debugging, currently it only constructs them

        x_values = np.zeros(x.shape)
        y_values = np.zeros(y.shape)

        for n,m,j,k in np.nditer([x,y,x_values,y_values],flags = ["refs_ok"],op_flags = ["readwrite"]):
            j[...] = n[()].value()
            k[...] = m[()].value()

        #Extracts the scheduled times for each case in the order that was given
        #Format is [scheduled room, scheduled day, scheduled time]
        #If not scheduled, case is a None type

        for i in range(cases):
            indices = np.transpose(x_values[i].nonzero())
            if len(indices) > 0 :
                schedule[i] = indices[0]
            else:
                schedule[i] = None

        #Separate overtime and idle time costs
        overtime = np.zeros(cases)
        for i in range(cases):
            overtime[i] = weights[1]*np.sum(y_values[i,:,T:])

        idletime = days*rooms*T*weights[0] - weights[0] * np.sum(y_values[:,:,:T])

        unscheduledcost = weights[3]*(cases - np.sum(x_values[:,:,:]))

    if(debug):
        print "=> elapsed time for post-procesing data = %s s" % tim.elapsed

    if (debug):
        print "objective =",value(prob.objective)

    return schedule,value(prob.objective),overtime,idletime,unscheduledcost

def simOR(casesCurDay, room, duration, appt, rooms, T):
    #takes cases sorted by starting time for the day (sorted irrespective of OR),
    #rooms, appointment times and durations of those cases indexed by case numbers,
    #and outputs the waiting, idle and over times by day.
    dury = np.zeros(rooms)
    x = np.zeros(rooms)
    waitTime = np.zeros(rooms)
    idleTime = np.zeros(rooms)
    overTime = np.zeros(rooms)

    for i in casesCurDay:
        curRoom = room[i]
        idleTime[curRoom] += max(appt[i] - x[curRoom]-dury[curRoom], 0)
        x[curRoom] = max(appt[i], x[curRoom] + dury[curRoom])
        waitTime[curRoom] += max(-appt[i] + x[curRoom], 0)
        dury[curRoom] = duration[i]
    for j in range(rooms):
        idleTime[j] += max(T - x[j] - dury[j],0)
        overTime[j] = max(-T + x[j] + dury[j],0)

    totIdle = np.sum(idleTime)
    totWait = np.sum(waitTime)
    totOver = np.sum(overTime)

    return totIdle, totWait, totOver, np.sum(duration[casesCurDay])

def extractOR(D, prob, days, rooms, cases):
    """
    Takes in the result of a call to LBP, and extracts the corresponding
    schedule, including extracting the ORs.  

    D: Array giving the durations of each case
    prob: output of the MILP
    days: integer number of days to be scheduled
    rooms: number of ORs to extract
    cases: number of cases
    """
    #get day and starting time from LBP returned value
    s = []
    dur = []
    sched = []
    for d in range(days):
        tmps = []
        tmpd = []
        tmpsched = []
        for i in range(prob[0].shape[0]):
            item = prob[0][i]
            if  item is not None:
                if(item[0] == d):
                    tmps.append(item[1])
                    tmpd.append(D[i])
                    tmpsched.append(i)
        s.append(tmps)
        dur.append(tmpd)
        sched.append(tmpsched)
    #sorting cases by starting time on each day
    sSorted = []
    durSorted = []
    schedSorted = []
    for d in range(days):
        #x = sorted(zip(s[d],dur[d],sched[d])) #alternative way of sorting
        #a,b,c = map(list,zip(*x))

        sSorted.append([sta for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
        durSorted.append([day for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
        schedSorted.append([sch for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
    #assigning phsyical rooms from virtual room
    isScheduled = np.zeros(cases)
    room = np.zeros(cases, 'int')
    for d in range(days):
        ORcurrent = 0
        timeCurrent = 0
        for j in range(rooms):
            for i in schedSorted[d]:
                if prob[0][i][1]<timeCurrent or isScheduled[i]==1:
                   continue
                room[i] = ORcurrent
                timeCurrent = prob[0][i][1] + D[i]
                isScheduled[i] = 1
            ORcurrent += 1
            timeCurrent = 0
    #output schedule
    for d in range(days):
        print "Cases:", schedSorted[d]
        print "Rooms:", [room[i] for i in schedSorted[d]]
        print "Starting times:", sSorted[d]
        print "Durations:", durSorted[d]
        print "-----------------------------------------------------------"

    print "The individual overtime cost is {0}".format(prob[2])
    print "The total overtime cost is {0}".format(np.sum(prob[2]))
    print "The idle time cost is {0}".format(prob[3])
    print "The unscheduled cost is {0}".format(prob[4])
    print "The cost is {0}".format(prob[1])
    print "-----------------------------------------------------------"

    return schedSorted, sSorted, durSorted


if __name__ == "__main__":
    if len(sys.argv) == 1:
        # Keck Data
        T = 18
        days = 5
        rooms = 24

        # Week 35
        mean = np.array([1,11,11,5,7,4,4,2,2,2,2,3,3,3,1,1,3,3,3,3,2,2,2,3,3,5,10,11,7,7,11,11,1,1,3,3,3,1,5,5,5,5,6,6,1,5,13,7,6,7,2,5,3,3,7,4,7,5,5,5,5,5,5,5,5,5,5,6,6,8,8,7,2,2,3,3,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,1,1,1,1,10,10,9,9,5,9,9,9,8,3,3,2,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,2,2,2,12,9,3,12,6,3,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        sd = np.array([0,4,4,2,2,3,3,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,3,4,3,3,3,3,1,1,2,2,2,1,3,3,3,3,4,1,0,4,6,2,2,2,1,3,1,1,3,2,6,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,1,1,1,1,6,6,2,0,2,3,3,3,3,2,2,1,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,2,7,3,2,5,3,2,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        D = mean + sd + 1
        cases = len(D)
        rows = np.array(range(cases))
        cols = np.array([0,1,2,3,4,4,4,5,6,7,8,9,9,9,10,10,11,12,13,14,15,15,16,17,18,0,4,4,11,19,20,20,21,22,23,23,24,15,1,25,17,21,26,9,0,23,27,16,17,28,29,29,17,17,30,17,28,31,31,9,32,33,33,33,33,33,33,31,33,34,34,35,14,36,27,9,31,31,31,9,37,37,37,37,38,38,38,38,38,31,39,12,39,40,40,12,39,12,12,41,42,12,42,39,43,44,45,46,24,24,24,18,18,47,40,24,4,4,4,3,23,23,48,21,8,7,7,29,16,49,2,35,50,50,30,30,30,30,0,51,21,21,21,22,22,22,22,22,8,8,8,8,8,8,8,7,20,52,24,46,10,9,9,9,9,41,41,3,7,16,15,48,48,24,50,24,2,23,15,16,24,24,22,8,53,8,30,30,30,19,54,14,52,52,55,55,1,1])
        data = np.ones(rows.shape)
        A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 1 (10%)
        # mean = np.array([1,11,11,11,5,7,4,4,4,2,2,2,2,3,3,3,1,1,3,3,3,3,3,2,2,2,3,3,5,10,7,7,7,11,11,2,1,1,3,3,3,1,1,5,5,5,5,5,6,6,1,5,13,7,6,7,2,3,5,3,3,7,4,7,5,5,5,5,5,5,5,5,5,5,6,6,8,8,7,2,2,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,1,1,1,1,10,10,10,9,9,5,9,9,9,8,3,3,3,2,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,12,9,3,12,6,3,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        # sd = np.array([0,4,4,4,2,2,3,3,3,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,3,3,3,3,3,3,1,1,1,2,2,2,1,1,3,3,3,3,3,4,1,0,4,6,2,2,2,1,2,3,1,1,3,2,6,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,1,1,1,1,6,6,6,2,0,2,3,3,3,3,2,2,2,1,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,7,3,2,5,3,2,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,2,3,4,3,3,3,3,5,6,7,8,9,9,9,10,10,11,12,13,14,15,16,17,17,18,19,0,3,20,20,14,21,21,22,23,24,25,26,26,27,17,28,24,19,29,2,30,9,0,26,31,16,19,32,33,1,33,19,19,34,19,32,35,35,35,35,35,35,36,9,37,37,35,37,38,38,39,15,40,9,31,41,41,41,41,36,42,42,42,42,9,37,37,37,41,37,43,13,43,44,44,43,13,45,13,13,13,46,43,46,47,48,49,25,25,25,50,18,18,29,51,44,25,3,3,3,4,26,26,26,52,7,53,24,8,8,16,33,54,1,39,55,55,34,34,34,34,0,56,7,7,7,7,7,7,7,23,23,23,23,23,24,24,24,8,22,21,25,50,10,9,57,9,9,9,9,45,45,4,8,16,17,17,55,25,52,52,25,1,26,16,17,25,25,7,23,7,58,34,34,34,20,59,15,22,22,60,60,2,2])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 2 (20%)
        # mean = np.array([7,1,11,11,11,5,7,4,4,4,2,2,4,2,2,3,3,3,3,1,1,1,3,3,3,3,3,3,2,2,2,3,3,3,5,10,11,7,7,7,11,11,2,2,1,1,3,3,3,1,1,1,2,5,5,5,5,5,6,6,1,5,5,13,7,6,7,2,3,5,3,3,7,4,7,5,5,5,5,5,5,5,5,5,5,6,6,7,8,8,7,2,2,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,6,1,1,1,1,10,10,10,9,9,5,9,9,9,8,3,3,3,2,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,12,9,3,3,12,6,3,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        # sd = np.array([2,0,4,4,4,2,2,3,3,3,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,2,3,4,3,3,3,3,3,1,1,1,1,2,2,2,1,1,1,2,3,3,3,3,3,4,1,0,4,4,6,2,2,2,1,2,3,1,1,3,2,6,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,1,1,1,1,6,6,6,2,0,2,3,3,3,3,2,2,2,1,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,7,3,2,2,5,3,2,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,2,3,4,5,4,4,4,4,6,7,2,8,9,10,10,10,10,11,11,11,12,13,14,15,16,17,18,19,19,20,21,21,1,4,4,22,22,16,23,23,24,23,25,26,27,28,28,29,30,19,31,32,26,21,33,3,34,10,1,28,35,35,18,21,36,37,2,37,21,21,38,21,36,39,39,39,39,39,39,40,10,41,41,39,41,42,43,43,44,17,0,10,35,45,45,45,45,40,46,46,46,46,46,10,41,41,41,45,41,47,14,47,48,48,47,14,49,14,14,14,50,47,50,51,52,27,53,27,27,27,54,20,20,33,55,48,27,4,4,4,5,28,28,28,56,8,57,58,26,9,9,18,37,57,2,44,59,59,38,38,38,38,1,60,8,8,8,8,8,8,8,25,25,25,25,25,26,26,26,9,24,23,27,54,11,10,61,10,10,10,10,49,49,5,62,9,18,19,19,59,27,56,56,27,2,28,18,19,27,27,8,25,8,63,38,38,38,22,64,17,24,24,65,65,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 3 (30%)
        # mean = np.array([7,1,11,11,11,5,7,4,4,4,2,2,4,2,2,2,3,3,3,3,1,1,1,3,3,3,3,3,3,3,2,2,2,3,3,3,5,10,11,5,7,7,7,7,11,11,2,2,2,1,1,3,3,3,1,1,1,1,2,5,5,5,5,5,5,6,6,1,5,5,13,7,6,7,2,3,5,3,3,7,4,7,5,5,5,5,5,5,5,5,5,5,5,6,6,6,7,8,8,7,2,2,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,6,1,1,1,1,10,10,10,10,9,9,5,9,9,9,8,3,3,3,3,2,8,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,12,9,3,3,12,6,6,3,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        # sd = np.array([2,0,4,4,4,2,2,3,3,3,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,2,3,4,3,3,3,3,3,3,3,1,1,1,1,1,2,2,2,1,1,1,1,2,3,3,3,3,3,3,4,1,0,4,4,6,2,2,2,1,2,3,1,1,3,2,6,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,1,1,1,1,6,6,6,6,2,0,2,3,3,3,3,2,2,2,2,1,3,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,7,3,2,2,5,3,3,2,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        # D = mean_o + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,2,3,4,6,5,5,5,5,7,8,2,9,9,10,11,11,11,11,12,12,12,13,14,15,16,17,18,19,20,21,21,22,23,23,1,5,5,17,24,24,18,18,25,25,10,26,25,27,28,29,30,30,31,31,32,21,33,34,35,28,23,36,3,37,11,1,30,38,38,20,23,39,40,2,40,23,23,41,23,39,42,42,42,42,42,42,43,43,11,44,44,42,44,44,45,46,46,47,19,0,11,11,38,48,48,48,48,43,49,49,49,49,49,11,44,44,44,48,44,50,16,50,51,51,50,16,52,16,16,16,53,50,53,54,55,29,56,29,29,29,57,22,22,22,36,58,51,29,5,5,5,6,30,30,30,30,59,9,60,61,61,28,10,10,20,40,60,2,47,62,62,41,41,41,41,1,63,9,9,9,9,9,9,9,27,27,27,27,27,28,28,28,10,26,25,29,57,12,11,64,11,11,11,11,52,52,6,65,10,32,20,21,21,62,29,59,59,29,2,30,20,21,29,29,9,27,9,66,41,41,41,24,67,19,26,26,68,68,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 4 (40%)
        # mean = np.array([7,9,1,11,11,11,5,7,7,4,4,4,4,2,2,4,2,2,2,3,3,3,3,3,1,1,1,1,3,3,3,3,3,3,3,3,2,2,2,3,3,3,5,10,5,7,7,7,7,11,11,2,2,2,1,1,1,3,3,3,3,1,1,1,1,1,2,5,5,5,5,5,5,6,6,1,5,5,13,7,5,6,7,7,2,3,5,3,3,7,4,7,5,5,5,5,5,5,5,5,5,5,5,6,6,6,7,8,8,7,2,2,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,6,1,1,1,1,10,10,10,10,9,9,5,9,9,9,8,3,3,3,3,2,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,2,12,9,3,3,12,6,6,3,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        # sd = np.array([2,2,0,4,4,4,2,2,2,3,3,3,3,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,2,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,2,3,3,3,3,3,3,4,1,0,4,4,6,2,2,2,2,1,1,2,3,1,1,3,2,6,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,1,1,1,1,6,6,6,6,2,0,2,3,3,3,3,2,2,2,2,1,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,2,7,3,2,2,5,3,3,2,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,1,2,3,4,6,5,5,6,5,5,5,7,8,2,9,9,10,11,11,11,11,11,12,12,12,12,13,14,15,16,17,18,19,20,21,22,22,23,24,24,1,5,18,16,16,19,19,25,25,10,26,25,27,28,29,30,31,31,31,32,32,33,33,22,34,35,36,28,24,37,3,38,11,1,31,39,39,21,24,24,40,36,41,2,41,24,24,42,24,40,43,43,43,43,43,43,44,44,11,45,45,43,45,45,46,47,47,48,20,0,11,11,39,49,49,49,49,44,50,50,50,50,50,11,45,45,45,45,49,45,51,17,51,52,52,51,17,53,17,17,17,54,51,54,55,56,30,57,30,30,30,58,23,23,23,37,59,52,30,5,5,5,6,31,31,31,31,60,61,62,62,28,10,10,21,41,61,2,48,63,63,42,42,42,42,1,64,9,9,9,9,9,9,9,9,27,27,27,27,27,28,28,28,10,26,25,30,58,12,11,65,11,11,11,11,11,53,53,6,66,10,33,21,22,22,63,30,60,60,30,2,31,21,22,30,30,9,27,9,67,42,42,42,16,68,20,26,26,69,69,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 5 (50%)
        # mean = np.array([7,9,1,11,11,11,10,5,7,7,4,4,4,4,9,2,2,4,2,2,2,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,3,3,3,2,2,2,2,1,3,3,3,5,10,5,7,7,7,7,7,11,11,2,2,2,1,1,1,3,3,3,3,1,1,1,1,1,2,2,5,5,5,5,5,5,5,6,6,1,5,5,5,13,7,5,6,7,7,2,3,3,3,5,3,3,7,4,7,8,5,5,5,5,5,5,5,5,5,5,5,6,6,6,7,8,8,7,2,2,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,6,6,1,1,1,1,10,10,10,10,9,9,5,9,9,9,8,3,3,3,3,2,8,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,2,12,9,3,3,12,12,6,6,3,6,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,13,13,2,2])
        # sd = np.array([2,2,0,4,4,4,2,2,2,2,3,3,3,3,3,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,1,1,1,2,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,2,2,3,3,3,3,3,3,3,4,1,0,4,4,4,6,2,2,2,2,1,1,2,2,1,3,1,1,3,2,6,5,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,1,1,1,1,6,6,6,6,2,0,2,3,3,3,3,2,2,2,2,1,3,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,2,7,3,2,2,5,5,3,3,2,4,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,1,2,3,4,3,6,5,5,6,5,5,5,7,8,9,2,10,10,11,12,12,12,12,12,13,13,13,13,13,14,15,16,17,18,19,20,21,22,23,23,24,25,26,27,27,1,5,19,17,17,20,20,20,28,28,11,29,28,30,31,32,33,34,34,34,35,35,36,36,23,12,37,38,39,26,31,27,40,3,41,12,1,34,34,42,42,22,27,27,43,39,44,2,2,27,44,27,27,45,27,43,46,47,47,47,47,47,47,48,48,12,49,49,47,49,49,50,51,51,52,21,0,12,12,42,53,53,53,53,48,54,54,54,54,54,12,49,49,49,49,53,49,55,18,55,56,56,55,18,57,18,18,18,58,55,58,59,25,33,60,33,33,33,61,26,26,26,40,62,56,33,5,5,5,6,34,34,34,34,63,64,65,65,31,31,11,11,22,44,64,2,52,66,66,45,45,45,45,1,67,10,10,10,10,10,10,10,10,30,30,30,30,30,31,31,31,11,29,28,33,61,13,12,68,12,12,12,12,12,57,57,6,69,11,28,36,22,23,36,23,66,33,63,63,33,2,34,22,23,33,33,10,30,10,70,45,45,45,17,71,21,29,29,72,72,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 6 (60%)
        # mean = np.array([7,9,1,11,11,11,11,10,5,7,7,4,4,4,4,9,2,2,4,4,2,2,2,2,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,1,3,3,3,5,5,10,10,11,5,5,7,7,7,7,7,11,11,2,2,2,1,1,1,3,3,3,3,12,1,1,1,1,1,2,2,5,5,5,5,5,5,5,6,6,1,5,5,5,13,13,7,5,6,7,7,2,3,3,3,5,5,3,3,7,4,7,8,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,7,8,8,7,2,2,1,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,4,4,8,8,7,7,7,10,10,12,12,10,5,5,6,6,6,1,1,1,1,10,10,10,10,9,9,5,9,9,9,8,3,3,3,3,2,8,8,8,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,2,12,9,3,3,12,12,6,6,3,6,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,4,13,13,2,2])
        # sd = np.array([2,2,0,4,4,4,4,2,2,2,2,3,3,3,3,3,0,0,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,1,1,1,2,4,3,3,4,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,5,1,1,1,1,1,2,2,3,3,3,3,3,3,3,4,1,0,4,4,4,6,6,2,2,2,2,1,1,2,2,1,3,3,1,1,3,2,6,5,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,3,3,1,1,1,1,6,6,6,6,2,0,2,3,3,3,3,2,2,2,2,1,3,3,3,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,2,7,3,2,2,5,5,3,3,2,4,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,1,2,3,4,5,3,6,5,5,6,5,5,5,7,8,9,2,2,10,10,11,11,12,12,12,12,12,13,13,13,13,13,14,15,16,17,18,19,19,20,21,22,23,23,24,25,26,27,27,1,11,5,5,5,15,19,17,17,20,20,20,28,28,11,29,28,30,31,32,33,34,34,34,35,35,35,36,36,23,12,37,38,39,26,31,27,40,3,41,12,1,34,34,42,42,42,22,27,27,43,39,44,2,2,27,39,44,27,27,45,27,43,46,47,47,47,47,47,47,48,48,12,49,49,49,47,47,49,49,50,51,51,52,21,0,12,12,12,42,53,53,53,53,48,54,54,54,54,54,12,49,49,49,49,53,49,55,18,55,56,56,55,18,57,18,18,18,58,55,58,59,59,25,33,33,60,33,33,33,61,26,26,26,40,62,56,33,5,5,5,6,34,34,34,34,63,10,10,64,65,65,31,31,11,11,22,44,64,2,52,66,66,45,45,45,45,1,67,10,10,10,10,10,10,10,10,30,30,30,30,30,31,31,31,11,29,28,33,61,13,12,68,12,12,12,12,12,57,57,6,69,11,28,36,22,23,36,23,66,33,63,63,33,2,34,22,23,33,33,10,30,10,70,45,45,45,17,71,21,29,29,29,72,72,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 7 (75%)
        # mean = np.array([7,9,1,11,11,11,11,10,5,7,7,4,4,4,4,9,2,2,4,4,2,2,2,2,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,1,3,3,3,5,5,10,10,11,5,5,8,6,7,7,7,7,7,7,11,11,2,2,2,2,1,1,1,2,3,3,3,3,12,1,1,1,1,1,1,2,2,5,5,5,5,5,5,5,5,6,7,6,1,5,5,5,13,13,7,7,5,6,7,7,2,3,3,8,3,5,5,3,3,3,7,2,3,4,7,8,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,2,7,8,8,7,2,2,2,1,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,6,4,4,4,8,8,7,7,7,10,10,12,12,10,5,5,6,6,6,1,1,1,1,10,10,10,10,10,9,9,14,5,9,9,9,8,2,3,3,3,3,3,2,8,8,8,8,8,8,8,8,11,8,4,4,2,2,5,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,12,3,2,5,2,2,2,2,2,12,9,3,3,12,12,6,6,3,6,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,2,4,3,1,1,4,4,4,13,13,2,2])
        # sd = np.array([2,2,0,4,4,4,4,2,2,2,2,3,3,3,3,3,0,0,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,1,1,1,2,4,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,2,2,2,2,2,5,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3,3,4,2,1,0,4,4,4,6,6,2,2,2,2,2,1,1,2,2,0,1,3,3,1,1,1,3,1,3,2,6,5,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,1,3,3,3,2,1,1,1,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,2,2,4,4,4,4,4,4,4,5,5,4,3,3,3,3,3,1,1,1,1,6,6,6,6,6,2,0,3,2,3,3,3,3,1,2,2,2,2,2,1,3,3,3,3,3,3,3,3,6,2,2,2,1,2,1,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,5,2,2,1,1,1,2,2,2,7,3,2,2,5,5,3,3,2,4,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,1,1,2,1,1,1,2,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,1,2,3,4,5,3,6,5,5,6,5,5,5,7,8,9,2,2,10,10,11,11,12,12,12,12,12,13,13,13,13,13,14,15,16,17,18,19,19,20,21,22,23,23,24,25,26,27,27,1,11,5,5,5,15,19,15,15,17,17,17,20,20,20,28,28,29,11,30,28,31,32,33,34,35,36,36,36,37,37,37,38,38,38,23,12,39,40,41,42,26,32,27,43,3,44,2,12,1,36,36,45,45,45,38,22,27,27,46,41,47,2,2,4,27,41,47,27,27,40,48,27,47,27,46,49,50,50,50,50,50,50,51,51,12,52,52,52,50,50,52,52,53,54,55,55,56,21,1,0,12,12,12,12,45,52,57,57,57,57,51,58,58,58,58,58,12,52,52,52,52,52,57,52,59,18,59,60,61,61,59,59,18,62,18,18,18,60,59,60,63,63,25,35,35,64,35,35,35,65,26,26,26,26,43,66,61,34,35,5,5,5,6,36,36,36,36,36,36,67,10,10,10,29,53,53,32,32,11,11,22,47,29,2,56,68,68,48,48,48,48,1,69,10,10,10,10,10,10,10,10,31,31,31,31,31,32,32,32,11,30,28,35,65,13,12,70,12,12,12,12,12,62,62,6,34,11,28,38,22,23,38,23,68,35,67,67,35,2,36,22,23,35,35,10,31,10,71,48,48,48,17,72,21,30,30,30,73,73,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Week 35 + overflow 8 (100%)
        # mean = np.array([7,9,1,11,11,11,11,10,5,7,7,4,4,4,4,9,2,2,4,4,2,2,2,2,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,1,3,3,3,5,5,10,10,11,5,5,8,6,7,7,7,7,7,7,11,11,2,2,2,2,1,1,1,2,3,3,3,3,12,1,1,1,1,1,1,2,2,5,5,5,5,5,5,5,5,6,7,6,1,5,5,5,13,13,7,7,5,6,7,7,2,3,3,3,8,3,5,5,3,3,3,7,2,3,4,4,7,8,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,2,7,7,8,8,7,2,2,2,2,2,1,3,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,7,7,10,7,6,4,4,4,6,8,8,7,7,7,10,10,10,12,12,12,6,10,2,10,5,5,6,6,6,1,1,1,1,3,10,10,10,10,10,9,9,14,7,5,9,9,9,8,8,2,3,3,3,3,3,2,2,8,8,8,8,8,8,8,8,8,11,8,4,4,7,2,2,2,5,4,6,3,3,4,4,4,3,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,4,4,12,3,3,3,3,2,5,5,2,2,2,2,2,2,12,9,9,3,3,3,12,12,12,6,6,6,3,3,6,6,6,5,5,5,5,6,1,1,1,1,4,4,2,2,3,3,3,3,2,4,3,1,1,4,4,4,4,13,13,2,2])
        # sd = np.array([2,2,0,4,4,4,4,2,2,2,2,3,3,3,3,3,0,0,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,0,1,1,1,2,4,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,2,2,2,2,2,5,1,1,1,1,1,1,2,2,3,3,3,3,3,3,3,3,4,2,1,0,4,4,4,6,6,2,2,2,2,2,1,1,2,2,2,0,1,3,3,1,1,1,3,1,3,2,2,6,5,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,1,3,3,3,3,2,1,1,1,1,1,2,2,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,5,3,2,2,2,2,3,4,4,4,4,4,4,4,4,5,5,5,4,5,1,4,3,3,3,3,3,1,1,1,1,3,6,6,6,6,6,2,0,3,5,2,3,3,3,3,3,1,2,2,2,2,2,1,1,3,3,3,3,3,3,3,3,3,6,2,2,2,4,1,2,2,1,2,3,2,2,2,2,2,2,3,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,3,3,5,0,2,2,0,2,1,1,1,1,2,2,2,2,7,3,3,2,2,2,5,5,5,3,3,3,2,2,4,4,4,2,2,2,2,3,1,1,1,1,2,2,1,1,2,2,2,1,1,2,1,1,1,2,2,2,2,6,6,2,2])
        # D = mean + sd + 1
        # cases = len(D)
        # rows = np.array(range(cases))
        # cols = np.array([0,1,1,2,3,4,5,3,6,5,5,6,5,5,5,7,8,9,2,2,10,10,11,11,12,12,12,12,12,13,13,13,13,13,14,15,16,17,18,19,19,20,21,22,23,23,24,25,26,27,27,1,11,5,5,5,15,19,15,15,17,17,17,20,20,20,28,28,29,11,30,28,31,32,33,34,35,36,36,36,37,37,37,38,38,38,23,12,39,40,41,42,26,32,27,43,3,44,2,12,1,36,36,45,45,45,38,22,27,27,46,41,47,2,2,3,4,27,41,47,27,27,40,48,27,47,37,27,46,49,50,50,50,50,50,50,51,51,12,52,52,52,50,50,52,52,53,25,54,55,55,56,21,33,1,1,0,12,57,12,12,12,45,52,58,58,58,58,51,59,59,59,59,59,12,52,52,52,52,52,58,52,60,18,60,61,62,62,60,60,60,18,63,18,18,18,61,64,60,63,61,19,62,47,65,65,25,35,35,66,35,35,35,67,12,26,26,26,26,43,68,62,34,39,35,5,5,5,6,5,36,36,36,36,36,36,35,69,10,10,10,29,53,53,32,32,10,11,11,22,47,70,29,2,3,56,71,65,72,72,48,48,48,48,1,73,10,10,10,10,10,10,10,10,29,31,31,31,31,31,32,32,32,11,30,28,35,35,67,0,13,64,70,12,74,75,12,12,12,12,12,12,63,63,63,6,34,34,11,28,28,38,38,22,38,23,38,24,23,72,35,69,69,35,2,36,22,23,35,35,10,31,10,76,76,48,48,48,17,77,21,30,30,30,30,78,78,3,3])
        # data = np.ones(rows.shape)
        # A = coo_matrix((data, (rows, cols)), shape = (cases, np.max(cols)+1)).toarray()

        # # Test data
        # D = np.array([1, 2, 3, 4, 4, 5, 10, 14, 4, 5,5,3,4])
        # cases = len(D)
        # days = 2
        # rooms = 2
        # T = 15
        # A = np.zeros([cases, 11])
        # for i in range(6):
        #     A[i][i] = 1
        # A[7][3] = 1
        # A[8][3] = 1
        # A[9][3] = 1
        # A[10][7] = 1
        # A[11][8] = 1
        # A[12][9] = 1

        prob = LBP(D, rooms, days, T, A, debug=True)

        print "********"
        print "prob =", prob
        print "********"
        i = 1
        for item in prob[0]:
            print("Case " + str(i))
            if item is not None:
                print("Day: " + str(item[0]))
                print("Time: " + str(item[1]))
            else:
                print("No valid schedule")
            print("\n")
            i += 1

#get day and starting time from LBP returned value
        s = []
        dur = []
        sched = []
        for d in range(days):
            tmps = []
            tmpd = []
            tmpsched = []
            for i in range(prob[0].shape[0]):
                item = prob[0][i]
                if  item is not None:
                    if(item[0] == d):
                        tmps.append(item[1])
                        tmpd.append(D[i])
                        tmpsched.append(i)
            s.append(tmps)
            dur.append(tmpd)
            sched.append(tmpsched)
#sorting cases by starting time on each day
        sSorted = []
        durSorted = []
        schedSorted = []
        for d in range(days):
            #x = sorted(zip(s[d],dur[d],sched[d])) #alternative way of sorting
            #a,b,c = map(list,zip(*x))

            sSorted.append([sta for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
            durSorted.append([day for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
            schedSorted.append([sch for (sta,day,sch) in sorted(zip(s[d],dur[d],sched[d]))])
#assigning phsyical rooms from virtual room
        isScheduled = np.zeros(cases)
        room = np.zeros(cases, 'int')
        for d in range(days):
            ORcurrent = 0
            timeCurrent = 0
            for j in range(rooms):
                for i in schedSorted[d]:
                    if prob[0][i][1]<timeCurrent or isScheduled[i]==1:
                       continue
                    room[i] = ORcurrent
                    timeCurrent = prob[0][i][1] + D[i]
                    isScheduled[i] = 1
                ORcurrent += 1
                timeCurrent = 0
#output schedule
        for d in range(days):
            print "Cases:", schedSorted[d]
            print "Rooms:", [room[i] for i in schedSorted[d]]
            print "Starting times:", sSorted[d]
            print "Durations:", durSorted[d]
            print "-----------------------------------------------------------"

        print "The individual overtime cost is {0}".format(prob[2])
        print "The total overtime cost is {0}".format(np.sum(prob[2]))
        print "The idle time cost is {0}".format(prob[3])
        print "The unscheduled cost is {0}".format(prob[4])
        print "The cost is {0}".format(prob[1])
        print "-----------------------------------------------------------"

        # Week 35
        Dactual = np.array([29,583,337,293,221,135,120,61,40,86,57,108,58,138,25,30,59,59,98,74,20,39,25,88,70,222,325,322,232,219,421,408,12,8,56,40,35,45,186,109,128,133,134,175,11,62,224,225,182,224,34,178,104,66,155,98,47,268,283,96,132,115,87,187,84,184,178,180,92,311,225,275,110,95,21,54,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,281,34,7,31,24,298,318,248,257,135,282,238,290,357,21,36,118,199,257,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,262,216,161,208,50,60,96,451,78,97,78,58,36,332,289,36,281,150,92,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # # WEEK 35 + overflow 1 (10%)
        # Dactual = np.array([29,583,337,255,293,221,135,60,120,61,40,86,57,108,58,138,25,30,59,100,59,98,74,20,39,25,88,70,222,325,120,232,219,421,408,31,12,8,56,40,35,45,11,210,186,109,128,133,134,175,11,62,224,225,182,224,34,24,178,104,66,155,98,47,268,283,96,132,115,87,187,84,184,178,180,92,311,225,275,110,95,21,54,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,281,34,7,31,24,298,318,730,248,257,135,282,238,290,357,21,36,36,118,199,257,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,262,216,161,208,50,60,96,451,78,97,144,78,58,26,36,332,289,36,281,150,92,473,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # WEEK 35 + overflow 2 (20%)
        # Dactual = np.array([163,29,583,337,255,293,221,135,60,120,61,40,105,86,57,33,108,58,138,25,30,50,54,59,100,59,98,74,20,39,25,60,88,70,222,325,322,120,232,219,421,408,34,31,12,8,56,40,35,45,5,11,27,210,186,109,128,133,134,175,11,387,62,224,225,182,224,34,24,178,104,66,155,98,47,268,283,96,132,115,87,187,84,184,178,180,92,175,311,225,275,110,95,21,54,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,198,281,34,7,31,24,298,318,730,248,257,135,282,238,290,357,21,36,36,118,199,257,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,262,216,161,208,50,60,96,451,78,97,144,78,58,26,36,332,289,97,36,281,150,92,473,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # WEEK 35 + overflow 3 (30%)
        # Dactual = np.array([163,29,583,337,291,293,221,135,60,120,61,40,105,74,86,57,33,108,58,138,25,30,50,53,54,59,100,59,98,74,20,39,25,60,88,70,222,325,322,136,120,261,232,219,421,408,48,34,31,12,8,56,40,35,79,45,5,11,27,210,186,109,128,133,54,134,175,11,387,62,224,225,182,224,34,24,178,104,66,155,98,47,169,268,283,96,132,115,87,187,84,184,178,218,180,92,175,311,225,275,110,95,85,21,54,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,198,281,34,7,31,24,154,298,318,730,248,257,135,282,238,290,357,53,21,36,36,118,199,257,251,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,262,216,161,208,50,60,96,451,78,97,144,78,58,26,36,332,289,97,36,281,97,150,92,473,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # WEEK 35 + overflow 4 (40%)
        # Dactual  = np.array([163,214,29,583,337,291,293,197,221,82,135,60,120,61,40,105,74,86,57,99,33,108,58,138,30,25,30,50,58,53,54,59,100,59,98,74,20,39,25,60,88,70,222,325,136,120,261,232,219,421,408,48,34,31,12,8,52,56,127,40,35,166,79,45,5,11,27,210,186,109,128,133,54,134,175,11,387,62,224,225,113,182,224,183,34,24,178,104,66,155,98,47,169,268,283,96,132,115,87,187,84,184,178,218,180,92,175,311,225,275,110,95,85,21,54,136,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,198,281,34,7,31,24,154,298,318,730,248,257,135,282,238,290,357,53,21,36,36,118,257,251,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,182,262,216,161,208,50,60,96,451,78,97,144,78,58,21,26,36,332,289,97,36,281,97,150,92,473,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # WEEK 35 + overflow 5 (50%)
        # Dactual  = np.array([163,214,29,583,337,291,299,293,197,221,82,135,60,120,318,61,40,105,74,86,57,99,33,108,58,138,21,30,25,30,50,58,53,54,59,100,59,98,74,20,39,25,48,26,60,88,70,222,325,136,120,810,261,232,219,421,408,48,34,31,12,8,52,56,127,40,35,166,79,45,5,11,20,27,135,210,186,109,128,133,54,134,175,11,387,43,62,224,225,113,182,224,183,34,62,24,140,178,104,66,155,98,47,282,169,268,283,96,132,115,87,187,84,184,178,218,180,92,175,311,225,275,110,95,85,21,54,136,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,184,198,281,34,7,31,24,154,298,318,730,248,257,135,282,238,290,357,53,21,36,36,118,240,257,251,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,182,262,216,161,208,50,60,96,451,78,97,144,78,58,21,26,36,332,289,97,36,450,281,97,150,92,473,88,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,255,443,12,45])

        # WEEK 35 + overflow 6 (60%)
        # Dactual  = np.array([163,214,29,583,337,291,255,299,293,197,221,82,135,60,120,318,61,40,39,105,55,74,86,57,99,33,108,58,138,21,30,25,30,50,60,58,53,54,59,100,59,98,74,20,39,25,48,26,60,88,70,222,34,325,283,322,63,136,120,810,261,232,219,421,408,48,34,31,12,8,52,56,127,40,35,353,166,79,45,5,11,20,27,135,210,186,109,128,133,54,134,175,11,387,43,62,424,224,225,113,182,224,183,34,62,24,140,79,178,104,66,155,98,47,282,137,169,268,283,96,132,115,87,187,84,184,178,139,218,180,92,175,311,225,275,110,95,60,85,21,54,136,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,59,69,362,125,398,197,120,658,369,284,390,364,147,184,150,198,281,34,7,31,24,154,298,318,730,248,257,135,282,238,290,357,53,21,36,36,118,244,199,240,257,251,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,182,262,216,161,208,50,60,96,451,78,97,144,78,58,21,26,36,332,289,97,36,450,281,97,150,92,473,88,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,47,255,443,12,45])

        # WEEK 35 + overflow 7 (75%)
        # Dactual  = np.array([163,214,29,583,337,291,255,299,293,197,221,82,135,60,120,318,61,40,39,105,55,74,86,57,99,33,108,58,138,21,30,25,30,50,60,58,53,54,59,100,59,98,74,20,39,25,48,26,60,88,70,222,34,325,283,322,63,136,283,121,180,120,810,261,232,219,421,408,10,48,34,31,12,8,52,173,56,127,40,35,353,35,166,79,45,5,11,20,27,135,62,210,186,109,128,133,54,134,234,175,11,387,43,62,424,224,225,282,113,182,224,183,34,62,24,240,140,79,178,104,66,173,155,59,129,98,47,282,137,169,268,283,96,132,115,87,187,84,184,178,139,218,180,92,36,175,311,225,275,110,38,95,60,26,85,21,54,37,186,136,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,90,393,59,69,362,125,398,197,120,658,369,284,390,364,147,184,150,198,281,34,7,31,24,207,154,298,318,730,248,257,475,135,282,238,290,357,46,98,53,21,36,36,118,155,244,199,240,257,251,276,332,292,199,148,94,32,26,192,40,145,106,178,97,154,309,26,170,452,295,244,235,183,215,205,201,196,294,227,182,262,216,161,208,50,60,96,451,78,97,144,78,58,21,26,36,332,289,97,36,450,281,97,150,92,473,88,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,92,103,169,67,26,30,190,235,47,255,443,12,45])

        # WEEK 35 + overflow 8 (100%)
        # Dactual  = np.array([163,214,29,583,337,291,255,299,293,197,221,82,135,60,120,318,61,40,39,105,55,74,86,57,99,33,108,58,138,21,30,25,30,50,60,58,53,54,59,100,59,98,74,20,39,25,48,26,60,88,70,222,34,325,283,322,63,136,283,121,180,120,810,261,232,219,421,408,10,48,34,31,12,8,52,173,56,127,40,35,353,35,166,79,45,5,11,20,27,135,62,210,186,109,128,133,54,134,234,175,11,387,43,62,424,224,225,282,113,182,224,183,34,114,62,24,240,140,79,178,104,66,173,155,59,129,98,104,47,282,137,169,268,283,96,132,115,87,187,84,184,178,139,218,180,92,36,179,175,311,225,275,44,110,68,38,95,60,26,85,68,21,54,37,186,136,184,263,89,162,186,152,189,97,158,98,137,137,188,134,89,241,206,308,159,90,393,59,69,247,362,125,398,197,120,658,237,369,418,284,390,439,159,64,364,147,184,150,198,281,34,7,31,24,33,207,154,298,318,730,248,257,475,142,135,282,238,290,195,357,46,98,53,21,36,36,77,118,155,244,199,240,257,251,276,332,243,292,199,148,94,298,32,64,26,192,94,270,40,145,106,178,97,154,309,26,272,170,452,295,244,235,183,215,205,201,196,294,227,182,262,216,161,208,50,60,145,96,451,88,170,78,82,97,164,144,78,58,45,21,26,36,332,401,289,97,97,36,373,450,281,95,97,150,92,53,136,473,88,156,270,112,146,199,25,20,34,16,53,108,92,26,62,50,59,92,103,169,67,26,30,67,190,235,47,255,443,12,45])

        Dactual += 45
        BLOCK = 30
        appt = BLOCK*np.array([item[1] if item is not None else 0 for item in prob[0]])
        costsTime = []
        for d in range(days):
            costsTime.append(simOR(schedSorted[d], room, Dactual, appt, rooms, T*BLOCK))
        costsTime = np.array(costsTime)
        print "The idle time and waiting time and over time costs are {0}".format(costsTime)
        print "The average (per OR per day) idle, waiting and over time costs are {0}".format(np.array([np.mean(x) for x in costsTime.transpose()])/24)
        print "Unscheduled cases are: {0}".format([i+1 for i in range(prob[0].shape[0]) if prob[0][i] is None])
